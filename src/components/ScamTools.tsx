'use client';
import React, { useState } from 'react';
import { checkBlacklist } from '@/services/blacklist';
import { useLanguage } from '@/context/LanguageContext';

type ScamToolsProps = {
    onQuickPrompt: (prompt: string) => void;
};

const tools = {
    en: [
        {
            label: 'Check Bank Account',
            prompt: 'Check this bank account number for scam activity:',
            icon: 'üè¶',
            color: 'bg-rose-200 hover:bg-rose-300',
            isBlacklistCheck: true,
            type: 'bankAccount'
        },
        {
            label: 'Check Phone Number',
            prompt: 'Can you check if this phone number is associated with scams:',
            icon: 'üì±',
            color: 'bg-purple-200 hover:bg-purple-300',
            isBlacklistCheck: true,
            type: 'phone'
        },
        {
            label: 'Report Scam',
            prompt: 'I want to report a scam.',
            icon: 'üö®',
            color: 'bg-amber-200 hover:bg-amber-300'
        },
        {
            label: 'Get Help',
            prompt: 'What should I do if I have been scammed?',
            icon: 'üÜò',
            color: 'bg-indigo-200 hover:bg-indigo-300'
        },
        {
            label: 'Legal Advice',
            prompt: 'What are my legal options for dealing with this scam?',
            icon: '‚öñÔ∏è',
            color: 'bg-emerald-200 hover:bg-emerald-300'
        }
    ],
    th: [
        {
            label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
            prompt: '‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:',
            icon: 'üè¶',
            color: 'bg-rose-200 hover:bg-rose-300',
            isBlacklistCheck: true,
            type: 'bankAccount'
        },
        {
            label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£',
            prompt: '‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:',
            icon: 'üì±',
            color: 'bg-purple-200 hover:bg-purple-300',
            isBlacklistCheck: true,
            type: 'phone'
        },
        {
            label: '‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á',
            prompt: '‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á',
            icon: 'üö®',
            color: 'bg-amber-200 hover:bg-amber-300'
        },
        {
            label: '‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
            prompt: '‡∏â‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á?',
            icon: 'üÜò',
            color: 'bg-indigo-200 hover:bg-indigo-300'
        },
        {
            label: '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢',
            prompt: '‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á?',
            icon: '‚öñÔ∏è',
            color: 'bg-emerald-200 hover:bg-emerald-300'
        }
    ]
};

const translations = {
    en: {
        title: 'Emergency Tools',
        blacklistFound: 'Found in blacklist',
        blacklistNotFound: 'Not found in blacklist',
        name: 'Name',
        description: 'Description',
        reportCount: 'Report Count'
    },
    th: {
        title: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
        blacklistFound: '‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ö‡∏•‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå',
        blacklistNotFound: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ö‡∏•‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå',
        name: '‡∏ä‡∏∑‡πà‡∏≠',
        description: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
        reportCount: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
    }
};

const ScamTools: React.FC<ScamToolsProps> = ({ onQuickPrompt }) => {
    const { language } = useLanguage();
    const t = translations[language];
    const [loading, setLoading] = useState<string | null>(null);
    const [blacklistResult, setBlacklistResult] = useState<any>(null);

    const handleToolClick = async (tool: any) => {
        if (tool.isBlacklistCheck) {
            setLoading(tool.type);
            setBlacklistResult(null);
            try {
                const result = await checkBlacklist(prompt);
                setBlacklistResult({
                    type: tool.type,
                    ...result
                });
            } catch (error) {
                console.error('Error checking blacklist:', error);
            }
            setLoading(null);
        }
        onQuickPrompt(tool.prompt);
    };

    return (
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6 border border-indigo-100">
            <h2 className="text-xl font-medium text-gray-700 mb-4">
                {t.title}
            </h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {tools[language].map(tool => (
                    <button
                        key={tool.label}
                        className={`${tool.color} text-gray-700 px-4 py-5 rounded-2xl hover:shadow-md transition-all duration-200 flex flex-col items-center justify-center gap-3 text-center min-h-[120px] border border-white/50 relative ${loading === tool.type ? 'opacity-75 cursor-wait' : ''}`}
                        onClick={() => handleToolClick(tool)}
                        disabled={loading !== null}
                    >
                        <span className="text-3xl">{tool.icon}</span>
                        <span className="text-sm font-medium leading-tight">{tool.label}</span>
                        {loading === tool.type && (
                            <div className="absolute inset-0 flex items-center justify-center bg-black/10 rounded-2xl">
                                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900"></div>
                            </div>
                        )}
                    </button>
                ))}
            </div>
            {blacklistResult && (
                <div className={`mt-4 p-4 rounded-lg ${blacklistResult.isBlacklisted ? 'bg-red-50 border border-red-200' : 'bg-green-50 border border-green-200'}`}>
                    <p className={`font-medium ${blacklistResult.isBlacklisted ? 'text-red-800' : 'text-green-800'}`}>
                        {blacklistResult.isBlacklisted ? t.blacklistFound : t.blacklistNotFound}
                    </p>
                    {blacklistResult.isBlacklisted && blacklistResult.details && (
                        <div className="mt-2 space-y-2 text-sm text-gray-700">
                            {blacklistResult.details.name && (
                                <p><strong>{t.name}:</strong> {blacklistResult.details.name}</p>
                            )}
                            {blacklistResult.details.description && (
                                <p><strong>{t.description}:</strong> {blacklistResult.details.description}</p>
                            )}
                            {blacklistResult.details.reportCount > 0 && (
                                <p><strong>{t.reportCount}:</strong> {blacklistResult.details.reportCount}</p>
                            )}
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default ScamTools; 